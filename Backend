from flask import Flask, request, jsonify
from flask_sqlalchemy import SQLAlchemy
from datetime import datetime

app = Flask(__name__)

# Configuration
app.config['SECRET_KEY'] = 'a_very_secret_key'
app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///smartvote.db'

db = SQLAlchemy(app)

# Database Model
class Voter(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    voter_id = db.Column(db.String(50), unique=True, nullable=False)
    name = db.Column(db.String(100), nullable=False)
    dob = db.Column(db.String(10), nullable=False)  # Stored as YYYY-MM-DD
    age = db.Column(db.Integer, nullable=False)
    address = db.Column(db.String(200), nullable=False)
    polling_station = db.Column(db.String(100), nullable=False)
    photo = db.Column(db.String(200), nullable=True)  # Path to photo
    biometric_data = db.Column(db.JSON, nullable=True)  # Fingerprint/Facial data
    qr_code = db.Column(db.String(200), nullable=True)  # QR code data

    def to_dict(self):
        return {
            "voter_id": self.voter_id,
            "name": self.name,
            "dob": self.dob,
            "age": self.age,
            "address": self.address,
            "polling_station": self.polling_station,
            "photo": self.photo,
            "biometric_data": self.biometric_data,
            "qr_code": self.qr_code
        }

# Initialize Database and Add Sample Data
with app.app_context():
    db.create_all()

    # Check if the database is empty before adding sample data
    if Voter.query.count() == 0:
        sample_voters = [
            Voter(
                voter_id="ADB1234567",
                name="John Citizen",
                dob="1980-05-15",
                age=43,
                address="123 Democracy St, Electorate",
                polling_station="Central High School, Booth #5",
                photo="/api/placeholder/150/180",
                biometric_data={"fingerprint": "FP12345"},
                qr_code="QR123"
            ),
            Voter(
                voter_id="ADB9876543",
                name="Jane Doe",
                dob="1990-08-20",
                age=33,
                address="456 Liberty Ave, Springfield",
                polling_station="Springfield Community Center, Booth #3",
                photo="/api/placeholder/150/180",
                biometric_data={"fingerprint": "FP67890"},
                qr_code="QR456"
            )
        ]
        db.session.add_all(sample_voters)
        db.session.commit()

# API Endpoints
@app.route('/api/verify-id', methods=['POST'])
def verify_id():
    """
    Verify voter using Voter ID and Date of Birth.
    """
    data = request.json
    voter_id = data.get('voter_id')
    dob = data.get('dob')

    if not voter_id or not dob:
        return jsonify({"status": "error", "message": "Missing voter ID or DOB"}), 400

    voter = Voter.query.filter_by(voter_id=voter_id, dob=dob).first()
    if voter:
        return jsonify({"status": "success", "data": voter.to_dict()}), 200
    return jsonify({"status": "error", "message": "Voter not found"}), 404

@app.route('/api/verify-biometric', methods=['POST'])
def verify_biometric():
    """
    Verify voter using biometric data (fingerprint or facial recognition).
    """
    data = request.json
    fingerprint = data.get('fingerprint')
    facial_data = data.get('facial_data')

    if not fingerprint and not facial_data:
        return jsonify({"status": "error", "message": "Missing biometric data"}), 400

    voter = None
    if fingerprint:
        voter = Voter.query.filter_by(biometric_data={"fingerprint": fingerprint}).first()
    elif facial_data:
        voter = Voter.query.filter_by(biometric_data={"facial_data": facial_data}).first()

    if voter:
        return jsonify({"status": "success", "data": voter.to_dict()}), 200
    return jsonify({"status": "error", "message": "Biometric verification failed"}), 404

@app.route('/api/verify-qr', methods=['POST'])
def verify_qr():
    """
    Verify voter using QR code.
    """
    data = request.json
    qr_code = data.get('qr_code')

    if not qr_code:
        return jsonify({"status": "error", "message": "Missing QR code"}), 400

    voter = Voter.query.filter_by(qr_code=qr_code).first()
    if voter:
        return jsonify({"status": "success", "data": voter.to_dict()}), 200
    return jsonify({"status": "error", "message": "QR code invalid"}), 404

@app.route('/api/placeholder/<int:width>/<int:height>')
def placeholder(width, height):
    """
    Serve a placeholder image for testing purposes.
    """
    return jsonify({"status": "success", "message": "Placeholder image served"}), 200

if __name__ == '__main__':
    app.run(debug=True)
